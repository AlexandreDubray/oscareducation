-extends "base.haml"

-block content
  %ol.breadcrumb
    %li
      %a{href: "{% url 'student_dashboard' %}"} Oscar
    %li.active
      Test
      =test_exercice.test

  -if not test_exercice.exercice
    %h1 Test de la compétence {{ test_exercice.skill.code }} mais nous n'avons pas encore de questions
    %hr

    %center
      %form{method: "POST"}
        -csrf_token
        %button.btn.btn-success.btn-lg{type: "submit", name: "value", value: "validate"}
          Marquer la compétence comme maitrisé

        %button.btn.btn-danger.btn-lg{type: "submit", name: "value", value: "unvalidate"}
          Marquer la compétence comme à apprendre

  -else
    .panel.panel-default
      .panel-heading
        Question n° {{ test_exercice.exercice.id }} sur
        =test_exercice.skill.code

      .panel-body
        -with content=test_exercice.get_content questions=test_exercice.get_questions
          -include "examinations/exercice_rendering.haml"

-block javascript
  :javascript
    $(function() {
      console.log("renderMathquil");
      var MQ = MathQuill.getInterface(2);

      var specialKeys = {
          right: "Right",
          left: "Left",
          Down: "Down",
          Up: "Up",
          bksp: "Backspace",
          tab: "Tab"
      }

      // add special keys, but don't override previous keyaction definitions
      Object.keys(specialKeys).forEach(function(key){
          if (!$.keyboard.keyaction[key]) {
              $.keyboard.keyaction[key] = specialKeys[key];
          }
      });

      $(".mathquill").each(function(index, mq) {
          var input = $($(mq).parent().find("input")[0]);

          var mathquill = MQ.MathField(mq, {
                handlers: {
                    edit: function() {
                        input.val(mathquill.latex());
                        console.log(input.val());
                    }
                }
            });

          var keyboard = $($(mq).parent().children()[0]);

          $(mq).click(function(){
              // keyboard.getkeyboard().reveal();
              keyboard.getkeyboard().reveal();
          })

          keyboard
              .on('keyboardChange', function(e, keyboard, el) {
                  console.log(e.action);
                  if (specialKeys[e.action]) {
                      mathquill.keystroke(specialKeys[e.action]);
                  } else if (e.action == "()") {
                      mathquill.cmd("(");
                      mathquill.cmd(")");
                      mathquill.keystroke("Left");
                  } else {
                      mathquill.cmd(e.action);
                  }
                  // $('#mathquill').focus();
              })
          .keyboard({
              usePreview: false,
              lockInput: true,
              noFocus: true,
              layout: 'custom',
              display: {
                  "Down": "&darr;",
                  "Up": "&uarr;"
              },
              customLayout: MATH_CUSTOM_LAYOUT,
              useCombos: false
          })
          // activate the typing extension
          .addTyping({
              showTyping: true,
              delay: 250
          });
      });
    });
